1.下载安装git
　　　https://git-scm.com/downloads
　　　
2.注册github账号并登陆
　　　
　　　	
3.将本机的ssh公钥配置给github，鼠标右键打开git bash here，然后输入
　　　ssh-keygen-t rsa -C “注册的邮箱地址”，然后获取本机的ssh公钥(记住.ssh文件所在的目录)进入.ssh文件用记事本打开id_rsa.pub文件获取公钥信息
　　　
　　　
4.登陆github，在github上添加本机的ssh公钥，验证ssh是否成功，在git bash下输入
ssh -T git@github.com
如果是第一次的会提示是否continue，输入yes就会看到：You've successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。


5.新建仓库，github规定使用者需要将代码公开，因此一般为public，要是不想将自己代码公开需要付费（private），勾选初始化新建一个README.md，这样仓库就新建成功了
　　　
　　　
6.接下来将github的仓库与本地的仓库上传上去
(1)在本地磁盘新建一个文件夹目录
(2)右键这个文件夹选git bash here
(3)初始化文件夹git init,这样文件夹里会多出一个隐藏的.git文件
(4)设置username和email，因为github每次commit都会记录他们
git config --global user.name “your name”
git config --global user.email “youremail@youremail.com”
(5)添加远程地址，即将origin代替你的仓库地址，之后只要用origin就表明你的guthub仓库地址，
　　　git remote add origin 你的仓库地址(例如：git@github.com:xiaomoo(你的用户名)/test(你刚才建的仓库名).git)
　　　你也可以用 git remote show origin来查看你的origin
(6)创建一个本地仓库的克隆版本：
　　　git clone /path/to/repository
(7)你的本地仓库由 git 维护的三棵"树"组成。第一个是你的 工作目录，它持有实际文件；第二个是 暂存区（Index），它像个缓存区域，临时保存你的改动；最后是 HEAD，它指向你最后一次提交的结果。你可以提出更改（把它们添加到暂存区），使用如下命令：
　　　git add <filename>
　　　这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：
　　　git commit -m "代码提交信息
(8)如果你在本地仓库进行了改动先执行：git pull origin master
　　　origin就是之前添加的github的地址，master是github远程地址的仓库分支，具体的上传和下载如下
　　　
　　　


文件上传：
1.git add (要上传的文件名)
2.git commit -m “提示信息”
3.git pull origin master
4.git push origin master

文件下载：
1.git clone (下载的git地址)

分支：
分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是"默认的"分支。在其他分支上进行开发，完成后再将它们合并到主分支上。
branches
创建一个叫做"feature_x"的分支，并切换过去：
git checkout -b feature_x
切换回主分支：
git checkout master
再把新建的分支删掉：
git branch -d feature_x
除非你将分支推送到远端仓库，不然该分支就是 不为他人所见的：
git push origin <branch>

更新与合并
要更新你的本地仓库至最新改动，执行：
git pull
以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。
要合并其他分支到你的当前分支（例如 master），执行：
git merge <branch>
在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突（conflicts）。 这时候就需要你修改这些文件来手动合并这些冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记为合并成功：
git add <filename>
在合并改动之前，你可以使用如下命令预览差异：
git diff <source_branch> <target_branch>

标签
为软件发布创建标签是推荐的。这个概念早已存在，在 SVN 中也有。你可以执行如下命令创建一个叫做 1.0.0 的标签：
git tag 1.0.0 1b2e1d63ff
1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。可以使用下列命令获取提交 ID：
git log
你也可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性。

替换本地改动
假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：
git checkout -- <filename>
此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。

假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：
git fetch origin
git reset --hard origin/master

实用小贴士
内建的图形化 git：
gitk
彩色的 git 输出：
git config color.ui true
显示历史记录时，每个提交的信息只显示一行：
git config format.pretty oneline
交互式添加文件到暂存区：
git add -i